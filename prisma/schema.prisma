// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Workspace {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  projects  Project[]
  isActive  Boolean   @default(false)
}

model Project {
  id            String         @id @default(cuid())
  name          String
  workspaceId   String
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([workspaceId])
}

model Conversation {
  id             String             @id @default(cuid())
  title          String
  projectId      String? // Nullable for Inbox items
  project        Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages       Message[]
  links          ConversationLink[] @relation("SourceConversation")
  linkedBy       ConversationLink[] @relation("TargetConversation")
  dependencies   Dependency[]       @relation("DependentConversation")
  dependencyFor  Dependency[]       @relation("BlockingConversation")
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([projectId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String // 'user' or 'assistant'
  content        String       @db.Text
  createdAt      DateTime     @default(now())

  @@index([conversationId])
}

model ConversationLink {
  id                   String       @id @default(cuid())
  sourceConversationId String
  targetConversationId String
  sourceConversation   Conversation @relation("SourceConversation", fields: [sourceConversationId], references: [id], onDelete: Cascade)
  targetConversation   Conversation @relation("TargetConversation", fields: [targetConversationId], references: [id], onDelete: Cascade)
  createdAt            DateTime     @default(now())

  @@unique([sourceConversationId, targetConversationId])
  @@index([sourceConversationId])
  @@index([targetConversationId])
}

model Dependency {
  id                      String       @id @default(cuid())
  dependentConversationId String
  blockingConversationId  String
  dependentConversation   Conversation @relation("DependentConversation", fields: [dependentConversationId], references: [id], onDelete: Cascade)
  blockingConversation    Conversation @relation("BlockingConversation", fields: [blockingConversationId], references: [id], onDelete: Cascade)
  createdAt               DateTime     @default(now())

  @@unique([dependentConversationId, blockingConversationId])
  @@index([dependentConversationId])
  @@index([blockingConversationId])
}